#!/usr/bin/env ruby -wU

# The purpose of this script is to quickly assess which specs should:
#
# - be removed (e.g. duplicate in Knapsack and Hyku)
# - be reviewed (e.g. differences between Knapsack and Hyku)
# - kept outright (e.g. in Knapsack but not Hyku)

require 'optparse'
config = { your_knapsack: './', upstream_hyku: './hyrax-webapp', patterns_to_check: ["spec/**/*.*", "app/**/*.*", "lib/**/*.*"] }

command_name = File.basename(__FILE__)


nlp = new_line_padding = " " * 37
optparse = OptionParser.new do |options|
  # This banner is the first line of your help documentation.
  options.set_banner "Usage: #{command_name} [options]\n\n" \
                     "Knapsacker - A command line tool for assisting on moving from Hyku towards\n             Knapsack.\n\n"

  options.on('-k PATH', '--knapsack', String, "The file path to your initialized Knapsack.\n#{nlp}Default: #{config[:your_knapsack]}") do |knapsack|
    config[:your_knapsack] = knapsack
  end

  options.on('-u PATH', '--upstream-hyku', String, "The file path to a clone of the Samvera Hyku\n#{nlp}repository.  Not your Hyku application.\n#{nlp}Default: #{config[:upstream_hyku]}") do |samvera|
    config[:upstream_hyku] = samvera
  end

  options.on('-y PATH', '--your-hyku', String, "The file path to your existing Hyku application\n#{nlp}(e.g. what you forked from Samvera Hyku).\n") do |your|
    config[:your_hyku] = your
  end

  options.on_tail('-h', '--help', "You're looking at it!") do
    warn options
    exit 1
  end
end

begin
  optparse.parse!
  mandatory = %i[your_knapsack upstream_hyku your_hyku]
  missing = mandatory.select { |param| config[param].nil? }
  raise OptionParser::MissingArgument, missing.join(', ') unless missing.empty?
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  warn "\e[0m\e[1m\e[31m#{$!}\e[0m\n"
  warn optparse
  exit
end

require 'fileutils'

in_your_hyku_but_not_in_upstream = []
duplicates = []
changed_in_your_hyku = []

your_knapsack = config.fetch(:your_knapsack)
your_hyku = config.fetch(:your_hyku)
upstream_hyku = config.fetch(:upstream_hyku)
dir_glob_patterns_to_check = config.fetch(:patterns_to_check)

unless File.exist?(File.join(your_hyku, "Gemfile"))
  $stderr.puts "ERROR: Expected your hyku not found at #{your_hyku}"
  exit!(2)
end

unless File.exist?(File.join(upstream_hyku, "Gemfile"))
  $stderr.puts "ERROR: Expected upstream hyku not found at #{upstream_hyku}"
  exit!(3)
end

dir_glob_patterns_to_check.each do |pattern|
  Dir.glob(pattern).each do |path|
    hyku_path = File.join(your_hyku, path)
    if File.exist?(hyku_path)
      results = `diff #{path} #{hyku_path}`.strip
      if results.empty?
        duplicates << path
      else
        changed_in_your_hyku << path
      end
    else
      in_your_hyku_but_not_in_upstream << path
    end
  end
end


puts "-"*72
puts "Knapsacker run context:"
puts "-"*72
puts "- Working Directory: #{FileUtils.pwd}"
puts "- Your Knapsack Dir: #{your_knapsack}"
puts "- Your Hyku Dir: #{your_hyku}"
puts "- Upstream Hyku Dir: #{upstream_hyku}"
puts "- Patterns to Check:"
config.fetch(:patterns_to_check).each do |pattern|
  puts "  - #{pattern}"
end
puts ""

puts "------------------------------------------------------------------"
puts "Files in your Hyku that are exact duplicates of upstream Hyku file"
puts "They are prefixed with a `='"
puts "------------------------------------------------------------------"
duplicates.each do |path|
  puts "= #{path}"
end

puts ""

puts "----------------------------------------------------"
puts "Files that are in your Hyku but not in upstream Hyku"
puts "They are prefixed with a `+'"
puts "----------------------------------------------------"
in_your_hyku_but_not_in_upstream.each do |path|
  puts "+ #{path}"
end

puts ""

puts "-------------------------------------------------------------"
puts "Files that are changed in your Hyku relative to upstream Hyku"
puts "They are prefixed with a `Δ'"
puts "-------------------------------------------------------------"
changed_in_your_hyku.each do |path|
  puts "Δ #{path}"
end
